# Generated by Django 2.1.7 on 2019-04-03 18:02

from django.db import migrations, models
import django.db.models.deletion
import django_better_admin_arrayfield.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AutoCodeAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='配置备注')),
                ('user', models.CharField(max_length=50, verbose_name='用户名')),
                ('pwd', models.CharField(max_length=30, verbose_name='密码')),
            ],
            options={
                'verbose_name': '打码平台用户名密码配置',
            },
        ),
        migrations.CreateModel(
            name='BasicConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='基本配置名称')),
                ('fast_submit', models.BooleanField(default=False, verbose_name='快速下单接口, True or False')),
                ('debug', models.BooleanField(default=True, verbose_name='调试模式, True or False')),
                ('travel_dates', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='出发日期(list)，格式: 2018-01-06, 按照优先级排列')),
                ('ticket_type', models.CharField(choices=[('成人票', '成人票'), ('学生票', '学生票')], default='成人票', max_length=30, verbose_name='票种, 目前取值有两种, 成人票或者学生票')),
                ('manual_trainnum_enable', models.BooleanField(verbose_name='manual_trainnum_enable, 是否根据时间范围 和 乘车类型 购票, 否则将需要手动填写车次')),
                ('train_types', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(choices=[('G', 'G'), ('D', 'D'), ('K', 'K'), ('T', 'T'), ('C', 'C'), ('Z', 'Z'), ('L', 'L'), ('S', 'S')], max_length=30), size=None, verbose_name='列车类型: 高铁 G 动车 D 普快K, 特快T, C城际 Z 直达 L 临客 普通纯数字车次 用S代替, manual_trainnum_enable 选项为 False时有效')),
                ('earliest_time', models.CharField(default='06:00', max_length=30, verbose_name='可接受最早出发时间 格式ex："00:00" 24小时格式, manual_trainnum_enable 选项为 False时有效')),
                ('latest_time', models.CharField(default='23:00', max_length=30, verbose_name='可接受最晚抵达时间, manual_trainnum_enable 选项为 False时有效')),
                ('train_list', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='过滤车次(list)，manual_trainnum_enable选项为True时启用')),
                ('use_station_group', models.BooleanField(default=True, verbose_name='是否使用站点组')),
                ('from_stations', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='出发城市列表，比如深圳北，就填深圳就搜得到')),
                ('to_stations', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='到达城市列表, 比如深圳北，就填深圳就搜得到')),
                ('station_groups', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='出发到达城市组,格式为 深圳,广州 为一组,表示从深圳到广州')),
                ('ticket_types', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='座位(list) 多个座位, 可选列表有: 商务特等座, 一等座, 二等座, 硬座, 软座, 无座, 高级软卧, 软卧, 硬卧, 动卧')),
                ('ticket_people_list', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='乘车人(list) 多个乘车人')),
                ('query_left_ticket_time', models.SmallIntegerField(default=5, verbose_name='查询余票时间间隔, 单位秒')),
                ('retry_login_time', models.SmallIntegerField(default=3, verbose_name='重试登录次数')),
                ('black_train_time', models.SmallIntegerField(default=3, verbose_name='加入小黑屋时间，此功能为了防止僵尸票导致一直下单不成功错过正常的票, 单位为分钟')),
            ],
            options={
                'verbose_name': '基本模式配置',
            },
        ),
        migrations.CreateModel(
            name='BuyTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='购票任务名称')),
                ('status', models.CharField(choices=[('pending', '未运行'), ('running', '运行中')], max_length=40, verbose_name='任务状态')),
                ('pid', models.PositiveIntegerField(blank=True, null=True, verbose_name='pid,进程号')),
            ],
            options={
                'verbose_name': '购买任务配置',
            },
        ),
        migrations.CreateModel(
            name='EmailConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='基本配置名称')),
                ('from_email', models.EmailField(max_length=254, verbose_name='发件人邮箱')),
                ('notice_email_list', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.EmailField(max_length=254), size=None, verbose_name='收件人邮箱列表')),
                ('username', models.CharField(max_length=50, verbose_name='用户名(发送邮件的邮箱用户名)')),
                ('password', models.CharField(max_length=200, verbose_name='密码(发送邮件的邮箱密码)')),
                ('email_gateway', models.CharField(max_length=200, verbose_name='邮件网关')),
                ('email_port', models.PositiveIntegerField(verbose_name='邮件网关端口')),
            ],
            options={
                'verbose_name': '邮箱配置',
            },
        ),
        migrations.CreateModel(
            name='PresaleConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='预售模式配置名称')),
                ('travel_date', models.DateField()),
                ('query_left_ticket_time', models.PositiveSmallIntegerField(default=5, verbose_name='预售模式下查询余票时间间隔 单位秒')),
                ('stop_time', models.PositiveSmallIntegerField(default=5, verbose_name='预售模式下提前多久停止正常模式的查询只查询预售模式的日期的票, 单位分钟')),
                ('continue_time', models.PositiveSmallIntegerField(default=5, verbose_name='预售模式下持续时间,过了持续时间之后,变为正常查询,按照正常查询的模式, 单位分钟')),
                ('start_times', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=30), size=None, verbose_name='预售时间点, 可以为多个, 格式如下所示,%H:%M 小时:分钟')),
            ],
            options={
                'verbose_name': '预售模式配置',
            },
        ),
        migrations.CreateModel(
            name='ProxyConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='代理配置名称')),
                ('proxy_url', models.CharField(max_length=30, verbose_name='代理url, scheme://user:passwd@ip:port, ex: http://aaa:bbb@127.0.0.1:1234 或者不加用户名密码http://127.0.0.1:1234')),
            ],
            options={
                'verbose_name': '代理配置',
            },
        ),
        migrations.CreateModel(
            name='TotalConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='总配置文件备注')),
                ('presale_enable', models.BooleanField(default=False, verbose_name='预售模式: 预售模式为抢票模式, 在抢票模式下的查询时间间隔可以配置的低一点')),
                ('auto_code_enable', models.BooleanField(default=True, verbose_name='是否启用自动打码')),
                ('auto_code_method', models.CharField(choices=[('freeapi', '免费打码'), ('ruokuai', '若快')], max_length=30, verbose_name='自动打码方式')),
                ('email_notice_enable', models.BooleanField(default=False, verbose_name='是否开启邮件通知')),
                ('cdn_enable', models.BooleanField(default=False, verbose_name='是否开启cdn')),
                ('multi_threading_enable', models.BooleanField(default=False, verbose_name='是否开启多线程')),
                ('online_check_time', models.PositiveIntegerField(default=60, verbose_name='在线检测时间, 单位秒, 启用自动打码有效')),
                ('save_img_enable', models.BooleanField(default=True, verbose_name='手动打码识别时候是否保存图片到本地进行识别')),
                ('weixin_notice_enable', models.BooleanField(default=False, verbose_name='是否开启微信通知, 使用server酱服务')),
                ('weixin_sckey', models.CharField(blank=True, max_length=300, null=True, verbose_name='微信通知key')),
                ('auto_code_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webadmin.AutoCodeAccount')),
                ('basic_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webadmin.BasicConfig')),
                ('email_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webadmin.EmailConfig')),
                ('presale_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webadmin.PresaleConfig')),
            ],
            options={
                'verbose_name': '总配置',
            },
        ),
        migrations.CreateModel(
            name='TrainAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('m_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='配置备注')),
                ('user', models.CharField(max_length=50, verbose_name='用户名')),
                ('pwd', models.CharField(max_length=30, verbose_name='密码')),
            ],
            options={
                'verbose_name': '12306账户配置',
            },
        ),
        migrations.AddField(
            model_name='totalconfig',
            name='train_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webadmin.TrainAccount'),
        ),
        migrations.AddField(
            model_name='buytasks',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webadmin.TotalConfig'),
        ),
        migrations.AddField(
            model_name='buytasks',
            name='proxy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webadmin.ProxyConfig'),
        ),
    ]
